class Solution {
public:
        vector<int>dp;
       int  getnextindex(vector<vector<int>>&jobs,int l,int currentjobend){
        int r = n-1;
        int result = n+1;
           while(l<=r){
            int mid = l+(r-l)/2;
            if(jobs[mid][0]>=currentjobend){
                result = mid;
                r= mid-1;
            }
            else {
                l=mid+1;
            }
           }
           return result;
       }
     int  n;
     int solve(vector<vector<int>>&jobs,int i){
        if(i>=n) return 0;
        if(dp[i]!=-1) return dp[i];
        int next = getnextindex(jobs,i+1,jobs[i][1]);
        int taken = jobs[i][2]+ solve(jobs,next);
        int nottaken = solve(jobs,i+1);
        return  dp[i]=max(taken,nottaken);

     }




    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
      n = startTime.size();
     vector<vector<int>>jobs;
     dp.assign(n+1,-1);
     for(int i=0;i<n;i++){
        jobs.push_back({startTime[i],endTime[i],profit[i]});
     }
     sort(jobs.begin(),jobs.end());
     return solve(jobs,0);

    }
};
