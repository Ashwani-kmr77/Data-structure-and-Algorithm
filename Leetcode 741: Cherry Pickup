class Solution {
public:
    int n ;
    vector<vector<vector<int>>>dp;
    int helpher(vector<vector<int>>& grid,int r1,int c1,int c2){
        int r2 = r1+c1-c2;

    if(r1>=n||c1>=n || r2>=n ||c2>=n || grid[r1][c1]==-1||grid[r2][c2]==-1) return INT_MIN;
    if(dp[r1][c1][c2]!=INT_MIN)  return dp[r1][c1][c2];
     if(r1 == n-1 && c1 == n-1){
         // we colleected all cherry 
         return grid[r1][c1];
     }
      int cherry = grid[r1][c1];
      if(c1!=c2){
         cherry += grid[r2][c2];
      }

      cherry += max({helpher(grid,r1,c1+1,c2+1),
                     helpher(grid,r1,c1+1,c2),
                     helpher(grid,r1+1,c1,c2+1),
                     helpher(grid,r1+1,c1,c2)
                     });
                      
       return  dp[r1][c1][c2]=cherry;

    }

    int cherryPickup(vector<vector<int>>& grid) {
         n  = grid.size();
         dp.assign(n,vector<vector<int>>(n,vector<int>(n,INT_MIN)));
        return max(0,helpher(grid,0,0,0));
        
    }
};
