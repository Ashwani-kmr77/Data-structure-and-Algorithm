class Solution {
public: 
          vector<vector<int>>dp;
      int countways(int row,int col,vector<vector<int>>&grid){
        // base case
        if(row >=grid.size()|| col>=grid[0].size()||grid[row][col]==1){
            return 0;
        }
        if(row == grid.size()-1 && col == grid[0].size()-1){
            return 1;
        }
        if(dp[row][col]!=-1) return dp[row][col];
     int rightways = countways(row,col+1,grid);
     int downways = countways(row+1,col,grid);
     return dp[row][col]= rightways+downways;

      }


    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();
        dp.assign(n,vector<int>(m,-1));
         return  countways(0,0,obstacleGrid);
    }
};
