class Solution {
public: 
        vector<vector<int>>dp;
    int minimumoprations(string &word1, string &word2, int n, int m) {
        if (n == 0) return m;  // need to insert all of word2
        if (m == 0) return n;  // need to delete all of word1
        if(dp[n][m]!=-1) return dp[n][m];
        if (word1[n-1] == word2[m-1]) 
            return dp[n][m]=minimumoprations(word1, word2, n-1, m-1);

        int insertOp  = minimumoprations(word1, word2, n, m-1);   // insert
        int deleteOp  = minimumoprations(word1, word2, n-1, m);   // delete
        int replaceOp = minimumoprations(word1, word2, n-1, m-1); // replace

        return dp[n][m]=1 + min({insertOp, deleteOp, replaceOp});
    }

    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        dp.assign(n+1,vector<int>(m+1,-1));
        return minimumoprations(word1, word2, n, m);
    }
};
